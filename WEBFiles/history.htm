<!DOCTYPE html>
<html><head>
	<meta http-equiv="Content-type" content="text/html; charset=utf-8">
	<title>История</title>
<link rel="stylesheet" href="style.css">
<style>
svg {
	font: 9px sans-serif;
}
.axis path,
.axis line {
	fill: none;
	stroke: #000;
	shape-rendering: crispEdges;
}
</style>
<script type="text/javascript" src="http://d3js.org/d3.v3.js"></script>
</head>
<body>
~inc:menumain.inc~
<div class="content">
 <div class="center">
	<form>
		<label><input type="radio" name="mode" value="stacked"> В один столбец</label>
		<label><input type="radio" name="mode" value="grouped"> Рядом</label>
	</form>
	<div id="chart-svg"></div>
 </div>
 <br>
 <form method="post" action="history.htm">
Дней: <input type="text" id="ChartMaxDays" maxlength="10" size="5" title="0 - all">&nbsp &nbsp
Группировка: <input type="radio" id="ShowBy" name="ShowBy" value="1"> день <input type="radio" name="ShowBy" value="2"> час &nbsp;
 <input type="submit" value="Обновить" onClick="updCookie('ChartMaxDays');updCookie('ShowBy');" class="button">
 </form>
 <br>
Скачать csv: <a href="history.csv">график</a>,&nbsp; <a href="historycnt.csv">итого</a> &nbsp;&nbsp;
Обновлено: <span id="timecnt">~TotalCntTime~</span><br>
</div>
~inc:footer.inc~
<script src="cookies.js"></script>
<script>
	cookie_path = "history";
	setCookieElem("ChartMaxDays", "~ChartMaxDays~");
	setCookieElem("ShowBy", "~ShowBy~");
</script>
~inc:time.inc~
<script>
var nLayers = 2;

var margin = {top: 45, right: 10, bottom: 80, left: 50},
	width = 630 - margin.left - margin.right,
	height = 400 - margin.top - margin.bottom;

var svg = d3.select("#chart-svg").append("svg")
	.attr("width", width + margin.left + margin.right)
	.attr("height", height + margin.top + margin.bottom)
	.append("g")
	.attr("transform", "translate(" + margin.left + "," + margin.top + ")");

d3.csv("history.csv", function (data){

	data.reverse();
	var headers = d3.keys(data[0]);
	headers.shift();

	var layers = d3.layout.stack()(headers.map(function(Range) {
		return data.map(function(d) {
		  return {x: d.time, y: +d[Range]};
		});
	}));
	
	var yGroupMax = d3.max(layers, function(layer) { return d3.max(layer, function(d) { return d.y; }); });
	var yStackMax = d3.max(layers, function(layer) { return d3.max(layer, function(d) { return d.y0 + d.y; }); });

	var xScale = d3.scale.ordinal()
		.domain(layers[0].map(function(d) { return d.x; }))
		.rangeRoundBands([25, width], .08);

	var y = d3.scale.linear()
		.domain([0, yStackMax])
		.range([height, 0]);

	var color = d3.scale.ordinal()
		.domain(headers)
		.range(["steelblue", "green"]);
	  
	var xAxis = d3.svg.axis()
		.scale(xScale)
		.tickPadding(6)
		.orient("bottom");

	var yAxis = d3.svg.axis()
		.scale(y)
		.orient("left");

	var layer = svg.selectAll(".layer")
		.data(layers)
		.enter().append("g")
		.attr("class", "layer")
		.style("fill", function(d, i) { return color(i); });

	var rect = layer.selectAll("rect")
		.data(function(d) { return d; })
		.enter().append("rect")
		.attr("x", function(d) { return xScale(d.x); })
		.attr("y", height)
		.attr("width", xScale.rangeBand())
		.attr("height", 0);

	rect.transition()
		.delay(function(d, i) { return i * 10; })
		.attr("y", function(d) { return y(d.y0 + d.y); })
		.attr("height", function(d) { return y(d.y0) - y(d.y0 + d.y); });

	svg.append("g")
		.attr("class", "x axis")
		.attr("transform", "translate(0," + height + ")")
		.call(xAxis)
		.selectAll("text").style("text-anchor", "end")
			.attr("dx", "-.8em")
			.attr("dy", ".15em")
			.attr("transform", function(d) {
				  return "rotate(-45)" 
				});
	
	svg.append("g")
		.attr("class", "y axis")
		.attr("transform", "translate(20,0)")
		.call(yAxis)
	  .append("text")
		.attr({"x": -30, "y": height + 20})
		.attr("dy", ".50em")
		.style("text-anchor", "end")
		.text("кВт*ч");

	if(headers.length > 1) {
	  var legend = svg.selectAll(".legend")
		.data(headers.slice().reverse())
			.enter().append("g")
			.attr("class", "legend")
			.attr("transform", function(d, i) { return "translate(-10," + (-margin.top + i * 20) + ")"; });
	   
		legend.append("rect")
			.attr("x", width - 18)
			.attr("width", 18)
			.attr("height", 18)
			.style("fill", color);
	
		legend.append("text")
			  .attr("x", width - 24)
			  .attr("y", 9)
			  .attr("dy", ".35em")
			  .style("text-anchor", "end")
			  .text(function(d) { return d;  });
	}

	d3.selectAll("input[name='mode']").on("change", change);

//	var timeout = setTimeout(function() { d3.select("input[value='grouped']").property("checked", true).each(change); }, 2000);
	d3.select("input[value='stacked']").property("checked", true);

	function change() {
	  //clearTimeout(timeout);
	  if(this.value === "grouped") transitionGrouped();
	  else transitionStacked();
	}

	function transitionGrouped() {
	  y.domain([0, yGroupMax]);

	  rect.transition()
		  .duration(300)
		  .delay(function(d, i) { return i * 10; })
		  .attr("x", function(d, i, j) { return xScale(d.x) + xScale.rangeBand() / nLayers * j; })
		  .attr("width", xScale.rangeBand() / nLayers)
		.transition()
		  .attr("y", function(d) { return y(d.y); })
		  .attr("height", function(d) { return height - y(d.y); });
	  svg.selectAll("g.y.axis")
        .call(yAxis);
	};

	function transitionStacked() {
	  y.domain([0, yStackMax]);

	  rect.transition()
		  .duration(300)
		  .delay(function(d, i) { return i * 10; })
		  .attr("y", function(d) { return y(d.y0 + d.y); })
		  .attr("height", function(d) { return y(d.y0) - y(d.y0 + d.y); })
		.transition()
		  .attr("x", function(d) { return xScale(d.x); })
		  .attr("width", xScale.rangeBand());
	  svg.selectAll("g.y.axis")
        .call(yAxis);
	};

    var tooltip = svg.append("g")
        .attr("class", "tooltip");
        
    tooltip.append("text")
        .attr("x", 15)
        .attr("dy", "1.2em")
        .style("text-anchor", "middle")
        .attr("font-size", "12px")
        .attr("font-weight", "bold");

	rect.on("mouseover", function() { 
			tooltip.style("display", "inline-block");
		})
		.on("mouseout", function() {
			tooltip.style("display", "none");
		})
		.on("mousemove", function(d) {
			var xPosition = d3.mouse(this)[0] - 15;
			var yPosition = d3.mouse(this)[1] - 25;
			tooltip.attr("transform", "translate(" + xPosition + "," + yPosition + ")");
			tooltip.select("text").text(d.y);
		});
});
</script>
</body></html>
